import { Palette } from "std-widgets.slint";
export component NextSongButton inherits Window {
    in-out property <int> w:100;
    in-out property <int> h:100;
    callback clicked();
    width: w * 1px;
    height: h * 1px;
    property <color> icon-color: Palette.control-foreground;
    animate icon-color { duration: 200ms; }
    timer := Timer {
        interval: 200ms;
        running: false;
        triggered => {
            root.icon-color = Palette.control-foreground;
            self.stop();
        }
    }

    TouchArea {
        clicked => {
            root.icon-color = Palette.control-background;
            timer.start();
            root.clicked();
        }
        Path {
            width: 100%;
            height: 100%;
            MoveTo {
                x: 0;
                y: 0;
            }

            LineTo {
                x: 0;
                y: h;
            }

            LineTo {
                x: w * 0.7;
                y: h * 0.5;
            }

            Close { }

            MoveTo {
                x: w * 0.8;
                y: 0;
            }

            LineTo {
                x: w * 0.8;
                y: h;
            }

            stroke: icon-color;
            stroke-width: root.w * 0.1px;
        }
    }
}

export component PrevSongButton inherits Window {
    in-out property <int> w:100;
    in-out property <int> h:100;
    callback clicked();
    width: w * 1px;
    height: h * 1px;
    property <color> icon-color: Palette.control-foreground;
    animate icon-color { duration: 200ms; }
    timer := Timer {
        interval: 200ms;
        running: false;
        triggered => {
            root.icon-color = Palette.control-foreground;
            self.stop();
        }
    }

    TouchArea {
        clicked => {
            root.icon-color = Palette.control-background;
            timer.start();
            root.clicked();
        };
        Path {
            width: 100%;
            height: 100%;
            MoveTo {
                x: w * 0.8;
                y: 0;
            }

            LineTo {
                x: w * 0.8;
                y: h;
            }

            LineTo {
                x: 0.1 * w;
                y: h * 0.5;
            }

            Close { }

            MoveTo {
                x: 0;
                y: 0;
            }

            LineTo {
                x: 0;
                y: h;
            }

            stroke: icon-color;
            stroke-width: root.w * 0.1px;
        }
    }
}

export component PlayPauseButton inherits Window {
    in-out property <bool> paused:true;
    in-out property <int> w:100;
    in-out property <int> h:100;
    callback toggled();
    width: w * 1px;
    height: h * 1px;
    property <color> icon-color: Palette.control-foreground;
    animate icon-color { duration: 200ms; }
    timer := Timer {
        interval: 200ms;
        running: false;
        triggered => {
            root.icon-color = Palette.control-foreground;
            self.stop();
        }
    }

    TouchArea {
        clicked => {
            root.icon-color = Palette.control-background;
            timer.start();
            root.toggled();
        }
        if !root.paused:
            Path {
            width: 100%;
            height: 100%;
            MoveTo {
                x: 0;
                y: 0;
            }

            LineTo {
                x: 0;
                y: h;
            }

            LineTo {
                x: w * 0.30;
                y: h;
            }

            LineTo {
                x: w * 0.30;
                y: 0;
            }

            Close { }

            MoveTo {
                x: w * 0.50;
                y: 0;
            }

            LineTo {
                x: w * 0.50;
                y: h;
            }

            LineTo {
                x: w * 0.80;
                y: h;
            }

            LineTo {
                x: w * 0.80;
                y: 0;
            }

            Close { }

            stroke: icon-color;
            stroke-width: root.w * 0.1px;
        }
        if root.paused:
            Path {
            width: 100%;
            height: 100%;
            MoveTo {
                x: 0;
                y: 0;
            }

            LineTo {
                x: 0;
                y: h;
            }

            LineTo {
                x: 0.8 * w;
                y: 0.5 * h;
            }

            Close { }

            stroke: icon-color;
            stroke-width: root.w * 0.1px;
        }
    }
}

export component InOrderButton inherits Window {
    in-out property <float> w:50;
    in-out property <float> h:50;
    in-out property <bool> selected;
    width: w * 1px;
    height: h * 1px;
    Path {
        MoveTo {
            x: 45;
            y: 25;
        }

        ArcTo {
            x: 25;
            y: 5;
            radius-x: 20;
            radius-y: 20;
            x-rotation: 0;
            large-arc: true;
            sweep: true;
        }

        LineTo {
            x: 20;
            y: 2;
        }

        MoveTo {
            x: 25;
            y: 5;
        }

        LineTo {
            x: 21;
            y: 9;
        }

        stroke-width: 1px;
        stroke: selected ? Palette.selection-background : Palette.foreground;
    }
}

export component RecursiveButton inherits Window {
    in-out property <float> w:50;
    in-out property <float> h:50;
    in-out property <bool> selected;
    width: w * 1px;
    height: h * 1px;
    Path {
        MoveTo {
            x: 45;
            y: 25;
        }

        ArcTo {
            x: 25;
            y: 5;
            radius-x: 20;
            radius-y: 20;
            x-rotation: 0;
            large-arc: true;
            sweep: true;
        }

        LineTo {
            x: 20;
            y: 2;
        }

        MoveTo {
            x: 25;
            y: 5;
        }

        LineTo {
            x: 21;
            y: 9;
        }

        MoveTo {
            x: 25;
            y: 20;
        }

        LineTo {
            x: 25;
            y: 30;
        }

        MoveTo {
            x: 25;
            y: 20;
        }

        LineTo {
            x: 22;
            y: 22;
        }

        stroke-width: 1px;
        stroke: selected ? Palette.selection-background : Palette.foreground;
    }
}

@rust-attr(derive(serde::Serialize, serde::Deserialize))
export enum PlayMode { 
    InOrder, 
    Recursive, 
    Random
 }

export component OverlapButton inherits Window {
    in-out property <float> w:50;
    in-out property <float> h:50;
    in-out property <PlayMode> mode;
    callback clicked();
    width: w * 1px;
    height: h * 1px;
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => {
            root.clicked();
        }
        if mode == PlayMode.Recursive: RecursiveButton {
            w: root.w;
            h: root.h;
            selected: mode == PlayMode.Recursive || mode == PlayMode.InOrder;
        }
        if mode != PlayMode.Recursive: InOrderButton {
            w: root.w;
            h: root.h;
            selected: mode == PlayMode.Recursive || mode == PlayMode.InOrder;
        }
    }
}

export component RandomButton inherits Window {
    callback clicked();
    in-out property <float> w:50;
    in-out property <float> h:50;
    in-out property <bool> selected;
    width: w * 1px;
    height: h * 1px;
    TouchArea {
        clicked => {
            root.clicked();
        };
        Path {
            MoveTo {
                x: 0;
                y: 0.2 * h;
            }

            LineTo {
                x: w * 0.3;
                y: 0.2 * h;
            }

            LineTo {
                x: w * 0.7;
                y: 0.8 * h;
            }

            LineTo {
                x: w;
                y: 0.8 * h;
            }

            LineTo {
                x: w * 0.9;
                y: 0.7 * h;
            }

            MoveTo {
                x: w;
                y: 0.8 * h;
            }

            LineTo {
                x: w * 0.9;
                y: 0.9 * h;
            }

            // 第二段
            MoveTo {
                x: 0;
                y: 0.8 * h;
            }

            LineTo {
                x: w * 0.3;
                y: 0.8 * h;
            }

            LineTo {
                x: w * 0.7;
                y: 0.2 * h;
            }

            LineTo {
                x: w;
                y: 0.2 * h;
            }

            LineTo {
                x: w * 0.9;
                y: 0.3 * h;
            }

            MoveTo {
                x: w;
                y: 0.2 * h;
            }

            LineTo {
                x: w * 0.9;
                y: 0.1 * h;
            }

            stroke: selected ? Palette.selection-background : Palette.foreground;
            stroke-width: 1px;
        }
    }
}
