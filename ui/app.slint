import { ListView, ComboBox, Slider, TabWidget, StandardListView, LineEdit, Switch, Palette } from "std-widgets.slint";
import { NextSongButton, PrevSongButton, PlayPauseButton, OverlapButton, RandomButton, PlayMode } from "button.slint";
import { SongInfo, TitleBar, SongItem, SortKey } from "song.slint";
import { LyricLine } from "lyric.slint";


// lyric item
export struct LyricItem {
    time: float,
    duration: float,
    text: string,
}

// trigger source
export enum TriggerSource {
    ClickItem,
    Prev,
    Next,
}

// ui state
export global UIState {
    // 当前播放进度 (秒)
    in-out property <float> progress;
    // 总时长 (秒)
    in-out property <float> duration;
    // 播放/暂停状态
    in-out property <bool> paused;
    // 是否正在拖动进度条
    in-out property <bool> dragging;
    // 歌曲列表
    in-out property <[SongInfo]> song_list;
    // 当前播放歌曲的信息
    in-out property <SongInfo> current_song;
    // 播放模式
    in-out property <PlayMode> play_mode;
    // 是否已被用户触发播放
    in-out property <bool> user_listening;
    // 当前播放歌曲的歌词
    in-out property <[LyricItem]> lyrics;
    // 当前歌词视窗的滚动条位置（一般为负数）
    in property <length> lyric_viewport_y;
    // 当前一行歌词的高度
    in-out property <length> lyric_line_height: 40px;
    // 歌曲文件夹配置
    in-out property <string> song_dir;
    // 关于信息
    in property <string> about_info;
    // 专辑封面图像
    in property <image> album_image;
    // 播放历史
    in property <[SongInfo]> play_history;
    // 播放历史索引
    in property <int> history_index: 0;
    // 歌曲排序方式
    in-out property <SortKey> sort_key;
    in-out property <SortKey> last_sort_key;
    // 升序/降序
    in-out property <bool> sort_ascending: true;
    // 当前语言
    in-out property <string> lang;
    // 主题颜色
    in-out property <bool> light_ui;
}

export component SongListView inherits Window {
    in-out property <bool> ascending;
    in-out property <SortKey> sort-key;
    in-out property <SortKey> last-sort-key;
    in-out property <[SongInfo]> song-list;
    callback sort-songs(SortKey, bool);
    callback play-song(SongInfo, TriggerSource);
    VerticalLayout {
        width: 100%;
        height: 100%;
        TitleBar {
            ascending: root.ascending;
            key: root.sort-key;
            sort-items(key, ascending) => {
                if (root.last-sort-key == key) {
                    root.sort-songs(key, !ascending);
                } else {
                    root.sort-songs(key, true)
                }
            }
        }

        ListView {
            for item in root.song-list: SongItem {
                info: item;
                double_clicked => {
                    root.play-song(item, TriggerSource.ClickItem);
                }
            }
        }
    }
}

export component ControlPanel inherits Window {
    in-out property <float> progress;
    in property <float> duration;
    in property <bool> paused;
    in property <PlayMode> play_mode;
    in-out property <bool> dragging;
    in property <SongInfo> current_song;
    in property <image> album_image;
    callback change-progress(float);
    callback toggle-play();
    callback play-next();
    callback play-prev();
    callback switch-mode(PlayMode);
    callback double-clicked();
    pure callback format-duration(float) -> string;
    VerticalLayout {
        width: 100%;
        height: 100%;
        Slider {
            minimum: 0;
            maximum: root.duration;
            // 单向绑定被用户强制改变状态后，绑定失效，不再自动更新, 所以双向绑定
            value <=> root.progress;
            released(v) => {
                root.dragging = false;
                change_progress(v);
            }
            changed(_) => {
                root.dragging = true;
            }
        }

        HorizontalLayout {
            height: 80%;
            alignment: center;
            TouchArea {
                width: 35%;
                height: 100%;
                double-clicked => {
                    root.double-clicked()
                };
                HorizontalLayout {
                    alignment: start;
                    spacing: 3px;
                    Rectangle {
                        width: 20%;
                        height: 100%;
                        Rectangle {
                            width: 40px;
                            height: 40px;
                            border-radius: 4px;
                            clip: true;
                            drop-shadow-blur: 6px;
                            Image {
                                y: parent.height / 2 - self.height / 2;
                                width: 100%;
                                height: 100%;
                                source: root.album_image;
                                image-fit: contain;
                            }
                        }
                    }

                    Rectangle {
                        width: 80%;
                        height: 100%;
                        Text {
                            width: 100%;
                            x: parent.width / 2 - self.width / 2;
                            text: root.current_song.song_name + " - " + root.current_song.singer;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            overflow: TextOverflow.elide;
                        }
                    }
                }
            }

            Rectangle {
                width: 6%;
                OverlapButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    width: 20px;
                    height: 20px;
                    mode: root.play_mode;
                    clicked => {
                        if (root.play_mode == PlayMode.InOrder) {
                            root.switch_mode(PlayMode.Recursive);
                        } else {
                            root.switch_mode(PlayMode.InOrder);
                        }
                    }
                }
            }

            Rectangle {
                width: 6%;
                PrevSongButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    width: 20px;
                    height: 20px;
                    clicked => {
                        root.play_prev();
                    }
                }
            }

            Rectangle {
                width: 6%;
                PlayPauseButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    width: 20px;
                    height: 20px;
                    // 单向绑定被用户强制改变状态后，绑定失效，不再自动更新, 所以双向绑定
                    paused: root.paused;
                    toggled => {
                        root.toggle_play();
                    }
                }
            }

            Rectangle {
                width: 6%;
                NextSongButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    width: 20px;
                    height: 20px;
                    clicked => {
                        root.play_next();
                    }
                }
            }

            Rectangle {
                width: 6%;
                border-color: transparent;
                RandomButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    selected: root.play_mode == PlayMode.Random;
                    width: 20px;
                    height: 20px;
                    clicked => {
                        root.switch_mode(PlayMode.Random);
                    }
                }
            }

            Rectangle {
                width: 35%;
                TouchArea {
                    double-clicked => {
                        root.double-clicked()
                    }
                }

                Text {
                    x: parent.width / 2 - self.width / 2;
                    text: root.format-duration(root.progress) + " / " + root.format-duration(root.duration);
                    vertical-alignment: center;
                    horizontal-alignment: center;
                }
            }
        }
    }
}

export component LyricsPanel inherits Window {
    in property <image> album_image;
    in property <SongInfo> current_song;
    in property <[LyricItem]> lyrics;
    in property <float> progress;
    in-out property <length> lyric_viewport_y;
    HorizontalLayout {
        width: 100%;
        height: 100%;
        VerticalLayout {
            width: 30%;
            alignment: center;
            lyric-image := Rectangle {
                x: parent.width / 2 - self.width / 2;
                width: 180px;
                height: self.width;
                clip: true;
                border-radius: 8px;
                drop-shadow-blur: 8px;
                Image {
                    width: 100%;
                    height: 100%;
                    source: album_image;
                }
            }

            Text {
                width: 100%;
                height: 25px;
                font-size: 13px;
                x: lyric-image.x;
                vertical-alignment: bottom;
                text: @tr("Artist: {}", current_song.singer);
                overflow: elide;
            }

            Text {
                width: 100%;
                height: 25px;
                font-size: 13px;
                x: lyric-image.x;
                vertical-alignment: bottom;
                text: @tr("Title: {}", current_song.song_name);
                overflow: elide;
            }
        }

        VerticalLayout {
            width: 70%;
            alignment: center;
            ListView {
                height: 100%;
                width: 100%;
                mouse-drag-pan-enabled: false;
                viewport-y <=> lyric_viewport_y;
                for item in lyrics: LyricLine {
                    content: item.text;
                    playing: (progress >= item.time) && (progress < item.time + item.duration);
                }
            }
        }
    }
}

export component SettingsPanel inherits Window {
    in-out property <string> song_dir;
    in-out property <string> lang;
    in-out property <bool> light_ui;
    callback refresh_song_list(string);
    callback set_lang(string);
    callback set_light_theme(bool);
    VerticalLayout {
        width: 100%;
        height: 100%;
        alignment: center;
        spacing: 20px;
        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            Rectangle {
                height: 30px;
                width: 200px;
                Text {
                    x: parent.width - self.width;
                    vertical-alignment: center;
                    text: @tr("Music directory: ");
                }
            }

            LineEdit {
                text <=> song_dir;
                width: 200px;
                accepted(p) => {
                    refresh_song_list(p);
                }
            }
        }

        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            Rectangle {
                height: 30px;
                width: 200px;
                Text {
                    x: parent.width - self.width;
                    vertical-alignment: center;
                    text: @tr("Language: ");
                }
            }

            ComboBox {
                width: 200px;
                current-value <=> lang;
                model: ["", "zh_CN", "es", "fr", "de", "ru"];
                selected(current-value) => {
                    root.set_lang(current-value);
                }
            }
        }

        HorizontalLayout {
            alignment: center;
            spacing: 10px;
            Rectangle {
                height: 30px;
                width: 200px;
                Text {
                    x: parent.width - self.width;
                    vertical-alignment: center;
                    text: @tr("Light theme: ");
                }
            }

            Switch {
                width: 200px;
                checked <=> light_ui;
                text: self.checked ? @tr("On") : @tr("Off");
                toggled => {
                    root.set_light_theme(self.checked);
                }
            }
        }
    }
}

export component MainWindow inherits Window {
    preferred-width: 850px;
    preferred-height: 500px;
    min-width: 850px;
    min-height: 500px;
    title: "Zeedle";
    icon: @image-url("cover.svg");
    forward-focus: key-input-handler;
    callback toggle_play();
    callback play(SongInfo, TriggerSource);
    callback play_next();
    callback play_prev();
    callback change_progress(float);
    callback switch_mode(PlayMode);
    callback refresh_song_list(string);
    callback sort_song_list(SortKey, bool);
    callback set_lang(string);
    pure callback format_duration(float) -> string;
    public function set_light_theme(yes: bool) {
        UIState.light_ui = yes;
        if (yes) {
            Palette.color-scheme = ColorScheme.light;
        } else {
            Palette.color-scheme = ColorScheme.dark;
        }
    }
    tabs := TabWidget {
        Tab {
            title: @tr("Gallery");
            VerticalLayout {
                SongListView {
                    ascending <=> UIState.sort_ascending;
                    sort-key <=> UIState.sort_key;
                    last-sort-key <=> UIState.last_sort_key;
                    song-list <=> UIState.song_list;
                    sort-songs(key, asc) => {
                        root.sort_song_list(key, asc);
                    }
                    play-song(info, src) => {
                        root.play(info, src);
                    }
                }
                ControlPanel {
                    max-height: 80px;
                    min-height: 50px;
                    preferred-height: 60px;
                    progress <=> UIState.progress;
                    duration <=> UIState.duration;
                    paused <=> UIState.paused;
                    dragging <=> UIState.dragging;
                    play_mode <=> UIState.play_mode;
                    current_song <=> UIState.current_song;
                    album_image <=> UIState.album_image;
                    change-progress(p) => {
                        root.change_progress(p);
                        root.focus();
                    }
                    toggle-play() => {
                        root.toggle_play();
                    }
                    play-next() => {
                        root.play_next();
                    }
                    play-prev() => {
                        root.play_prev();
                    }
                    switch-mode(m) => {
                        root.switch_mode(m);
                    }
                    double-clicked() => {
                        tabs.current-index = 1; // 切换到歌词页
                    }
                    format-duration(d) => {
                        return root.format_duration(d);
                    }
                }
            }
        }

        Tab {
            title: @tr("Lyrics");
            Rectangle {
                width: 100%;
                height: 100%;
                z: -5;
                TouchArea {
                    double-clicked => {
                        tabs.current-index = 0; // 切换到歌曲列表页
                    }
                }
            }

            LyricsPanel {
                width: 100%;
                height: 100%;
                album_image <=> UIState.album_image;
                current_song <=> UIState.current_song;
                lyrics <=> UIState.lyrics;
                progress <=> UIState.progress;
                lyric_viewport_y <=> UIState.lyric_viewport_y;
            }
        }

        Tab {
            title: @tr("Settings");
            TouchArea {
                clicked => {
                    root.focus();
                }
            }

            SettingsPanel {
                width: 100%;
                height: 100%;
                song_dir <=> UIState.song_dir;
                lang <=> UIState.lang;
                light_ui <=> UIState.light_ui;
                refresh_song_list(p) => {
                    root.refresh_song_list(p);
                }
                set_lang(l) => {
                    root.set_lang(l);
                }
                set_light_theme(yes) => {
                    root.set_light_theme(yes);
                }
            }
        }

        Tab {
            title: @tr("About");
            Text {
                width: 100%;
                height: 100%;
                font-size: 16px;
                text: UIState.about_info;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
    }

    key-input-handler := FocusScope {
        key-released(event) => {
            if event.text == Key.Space {
                root.toggle_play();
                return accept;
            } else if event.text == Key.RightArrow || event.text == Key.DownArrow {
                root.play_next();
                return accept;
            } else if event.text == Key.LeftArrow || event.text == Key.UpArrow {
                root.play_prev();
                return accept;
            } else if event.text == Key.F1 {
                tabs.current-index = 0;
                return accept;
            } else if event.text == Key.F2 {
                tabs.current-index = 1;
                return accept;
            } else if event.text == Key.F3 {
                tabs.current-index = 2;
                return accept;
            } else if event.text == Key.F4 {
                tabs.current-index = 3;
                return accept;
            }
            return reject;
        }
    }
}
